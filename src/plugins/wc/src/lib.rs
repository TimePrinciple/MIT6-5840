/// A word-count application "plugin" for MapReduce.
/// Build with `cargo build`
use MIT6_5840::LEC1::mr::worker::KeyValue;

/// The map function is called once for each file of input. The first argument
/// is the name of the input file, and the second the file's complete contents.
/// The input file name should be ignored, and look only at the contents
/// argument.

/// > The return value is a slice of key/value pairs. Documented in Go
/// > implementation.
/// While the key/value pairs are generated from by the map function, so it has
/// to be a vector which owns these pairs.
#[no_mangle]
pub fn map(_filename: String, contents: String) -> Vec<KeyValue> {
    // Replace non-alphabetic chars with whitespace
    let words = contents
        .chars()
        .map(|c| if !c.is_alphabetic() { ' ' } else { c });
    // Split the processed content by whitespace
    let words: Vec<String> = String::from_iter(words)
        .split_whitespace()
        .map(|str| str.to_string())
        .collect();
    // Consume the Vector and creates a vector of KeyValue
    words
        .into_iter()
        .map(|w| KeyValue {
            key: w,
            value: "1".to_string(),
        })
        .collect()
}

/// The reduce function is called once for each key generated by the map tasks,
/// with a list of all the values created for that key by any map task.
#[no_mangle]
pub fn reduce(_key: String, values: Vec<String>) -> String {
    // return the number of occurrences of this word.
    values.len().to_string()
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_map() {
        let content = r#"
Title: The Importance of Being Earnest
       A Trivial Comedy for Serious People


Author: Oscar Wilde



Release Date: August 29, 2006  [eBook #844]

Language: English

Character set encoding: ISO-646-US (US-ASCII)


***START OF THE PROJECT GUTENBERG EBOOK THE IMPORTANCE OF BEING EARNEST***
        "#;
        map("dummy".to_string(), content.to_string());
    }
}
